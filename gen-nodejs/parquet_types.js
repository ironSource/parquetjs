//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.Type = {
'BOOLEAN' : 0,
'INT32' : 1,
'INT64' : 2,
'INT96' : 3,
'FLOAT' : 4,
'DOUBLE' : 5,
'BYTE_ARRAY' : 6,
'FIXED_LEN_BYTE_ARRAY' : 7
};
ttypes.ConvertedType = {
'UTF8' : 0,
'MAP' : 1,
'MAP_KEY_VALUE' : 2,
'LIST' : 3,
'ENUM' : 4,
'DECIMAL' : 5,
'DATE' : 6,
'TIME_MILLIS' : 7,
'TIME_MICROS' : 8,
'TIMESTAMP_MILLIS' : 9,
'TIMESTAMP_MICROS' : 10,
'UINT_8' : 11,
'UINT_16' : 12,
'UINT_32' : 13,
'UINT_64' : 14,
'INT_8' : 15,
'INT_16' : 16,
'INT_32' : 17,
'INT_64' : 18,
'JSON' : 19,
'BSON' : 20,
'INTERVAL' : 21
};
ttypes.FieldRepetitionType = {
'REQUIRED' : 0,
'OPTIONAL' : 1,
'REPEATED' : 2
};
ttypes.Encoding = {
'PLAIN' : 0,
'PLAIN_DICTIONARY' : 2,
'RLE' : 3,
'BIT_PACKED' : 4,
'DELTA_BINARY_PACKED' : 5,
'DELTA_LENGTH_BYTE_ARRAY' : 6,
'DELTA_BYTE_ARRAY' : 7,
'RLE_DICTIONARY' : 8
};
ttypes.CompressionCodec = {
'UNCOMPRESSED' : 0,
'SNAPPY' : 1,
'GZIP' : 2,
'LZO' : 3,
'BROTLI' : 4,
'LZ4' : 5,
'ZSTD' : 6
};
ttypes.PageType = {
'DATA_PAGE' : 0,
'INDEX_PAGE' : 1,
'DICTIONARY_PAGE' : 2,
'DATA_PAGE_V2' : 3
};
ttypes.BoundaryOrder = {
'UNORDERED' : 0,
'ASCENDING' : 1,
'DESCENDING' : 2
};
Statistics = module.exports.Statistics = function(args) {
  this.max = null;
  this.min = null;
  this.null_count = null;
  this.distinct_count = null;
  this.max_value = null;
  this.min_value = null;
  if (args) {
    if (args.max !== undefined) {
      this.max = args.max;
    }
    if (args.min !== undefined) {
      this.min = args.min;
    }
    if (args.null_count !== undefined) {
      this.null_count = args.null_count;
    }
    if (args.distinct_count !== undefined) {
      this.distinct_count = args.distinct_count;
    }
    if (args.max_value !== undefined) {
      this.max_value = args.max_value;
    }
    if (args.min_value !== undefined) {
      this.min_value = args.min_value;
    }
  }
};
Statistics.prototype = {};
Statistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.max = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.min = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.null_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.distinct_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.max_value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.min_value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Statistics.prototype.write = function(output) {
  output.writeStructBegin('Statistics');
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.STRING, 1);
    output.writeString(this.max);
    output.writeFieldEnd();
  }
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.STRING, 2);
    output.writeString(this.min);
    output.writeFieldEnd();
  }
  if (this.null_count !== null && this.null_count !== undefined) {
    output.writeFieldBegin('null_count', Thrift.Type.I64, 3);
    output.writeI64(this.null_count);
    output.writeFieldEnd();
  }
  if (this.distinct_count !== null && this.distinct_count !== undefined) {
    output.writeFieldBegin('distinct_count', Thrift.Type.I64, 4);
    output.writeI64(this.distinct_count);
    output.writeFieldEnd();
  }
  if (this.max_value !== null && this.max_value !== undefined) {
    output.writeFieldBegin('max_value', Thrift.Type.STRING, 5);
    output.writeString(this.max_value);
    output.writeFieldEnd();
  }
  if (this.min_value !== null && this.min_value !== undefined) {
    output.writeFieldBegin('min_value', Thrift.Type.STRING, 6);
    output.writeString(this.min_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringType = module.exports.StringType = function(args) {
};
StringType.prototype = {};
StringType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringType.prototype.write = function(output) {
  output.writeStructBegin('StringType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UUIDType = module.exports.UUIDType = function(args) {
};
UUIDType.prototype = {};
UUIDType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UUIDType.prototype.write = function(output) {
  output.writeStructBegin('UUIDType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapType = module.exports.MapType = function(args) {
};
MapType.prototype = {};
MapType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapType.prototype.write = function(output) {
  output.writeStructBegin('MapType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListType = module.exports.ListType = function(args) {
};
ListType.prototype = {};
ListType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListType.prototype.write = function(output) {
  output.writeStructBegin('ListType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EnumType = module.exports.EnumType = function(args) {
};
EnumType.prototype = {};
EnumType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnumType.prototype.write = function(output) {
  output.writeStructBegin('EnumType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DateType = module.exports.DateType = function(args) {
};
DateType.prototype = {};
DateType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DateType.prototype.write = function(output) {
  output.writeStructBegin('DateType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NullType = module.exports.NullType = function(args) {
};
NullType.prototype = {};
NullType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NullType.prototype.write = function(output) {
  output.writeStructBegin('NullType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DecimalType = module.exports.DecimalType = function(args) {
  this.scale = null;
  this.precision = null;
  if (args) {
    if (args.scale !== undefined) {
      this.scale = args.scale;
    }
    if (args.precision !== undefined) {
      this.precision = args.precision;
    }
  }
};
DecimalType.prototype = {};
DecimalType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scale = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.precision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecimalType.prototype.write = function(output) {
  output.writeStructBegin('DecimalType');
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.I32, 1);
    output.writeI32(this.scale);
    output.writeFieldEnd();
  }
  if (this.precision !== null && this.precision !== undefined) {
    output.writeFieldBegin('precision', Thrift.Type.I32, 2);
    output.writeI32(this.precision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MilliSeconds = module.exports.MilliSeconds = function(args) {
};
MilliSeconds.prototype = {};
MilliSeconds.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MilliSeconds.prototype.write = function(output) {
  output.writeStructBegin('MilliSeconds');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MicroSeconds = module.exports.MicroSeconds = function(args) {
};
MicroSeconds.prototype = {};
MicroSeconds.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MicroSeconds.prototype.write = function(output) {
  output.writeStructBegin('MicroSeconds');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeUnit = module.exports.TimeUnit = function(args) {
  this.MILLIS = null;
  this.MICROS = null;
  if (args) {
    if (args.MILLIS !== undefined) {
      this.MILLIS = args.MILLIS;
    }
    if (args.MICROS !== undefined) {
      this.MICROS = args.MICROS;
    }
  }
};
TimeUnit.prototype = {};
TimeUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.MILLIS = new ttypes.MilliSeconds();
        this.MILLIS.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.MICROS = new ttypes.MicroSeconds();
        this.MICROS.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeUnit.prototype.write = function(output) {
  output.writeStructBegin('TimeUnit');
  if (this.MILLIS !== null && this.MILLIS !== undefined) {
    output.writeFieldBegin('MILLIS', Thrift.Type.STRUCT, 1);
    this.MILLIS.write(output);
    output.writeFieldEnd();
  }
  if (this.MICROS !== null && this.MICROS !== undefined) {
    output.writeFieldBegin('MICROS', Thrift.Type.STRUCT, 2);
    this.MICROS.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimestampType = module.exports.TimestampType = function(args) {
  this.isAdjustedToUTC = null;
  this.unit = null;
  if (args) {
    if (args.isAdjustedToUTC !== undefined) {
      this.isAdjustedToUTC = args.isAdjustedToUTC;
    }
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
TimestampType.prototype = {};
TimestampType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isAdjustedToUTC = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unit = new ttypes.TimeUnit();
        this.unit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimestampType.prototype.write = function(output) {
  output.writeStructBegin('TimestampType');
  if (this.isAdjustedToUTC !== null && this.isAdjustedToUTC !== undefined) {
    output.writeFieldBegin('isAdjustedToUTC', Thrift.Type.BOOL, 1);
    output.writeBool(this.isAdjustedToUTC);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRUCT, 2);
    this.unit.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeType = module.exports.TimeType = function(args) {
  this.isAdjustedToUTC = null;
  this.unit = null;
  if (args) {
    if (args.isAdjustedToUTC !== undefined) {
      this.isAdjustedToUTC = args.isAdjustedToUTC;
    }
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
TimeType.prototype = {};
TimeType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isAdjustedToUTC = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unit = new ttypes.TimeUnit();
        this.unit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeType.prototype.write = function(output) {
  output.writeStructBegin('TimeType');
  if (this.isAdjustedToUTC !== null && this.isAdjustedToUTC !== undefined) {
    output.writeFieldBegin('isAdjustedToUTC', Thrift.Type.BOOL, 1);
    output.writeBool(this.isAdjustedToUTC);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRUCT, 2);
    this.unit.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IntType = module.exports.IntType = function(args) {
  this.bitWidth = null;
  this.isSigned = null;
  if (args) {
    if (args.bitWidth !== undefined) {
      this.bitWidth = args.bitWidth;
    }
    if (args.isSigned !== undefined) {
      this.isSigned = args.isSigned;
    }
  }
};
IntType.prototype = {};
IntType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.bitWidth = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isSigned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntType.prototype.write = function(output) {
  output.writeStructBegin('IntType');
  if (this.bitWidth !== null && this.bitWidth !== undefined) {
    output.writeFieldBegin('bitWidth', Thrift.Type.BYTE, 1);
    output.writeByte(this.bitWidth);
    output.writeFieldEnd();
  }
  if (this.isSigned !== null && this.isSigned !== undefined) {
    output.writeFieldBegin('isSigned', Thrift.Type.BOOL, 2);
    output.writeBool(this.isSigned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JsonType = module.exports.JsonType = function(args) {
};
JsonType.prototype = {};
JsonType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JsonType.prototype.write = function(output) {
  output.writeStructBegin('JsonType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BsonType = module.exports.BsonType = function(args) {
};
BsonType.prototype = {};
BsonType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BsonType.prototype.write = function(output) {
  output.writeStructBegin('BsonType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogicalType = module.exports.LogicalType = function(args) {
  this.STRING = null;
  this.MAP = null;
  this.LIST = null;
  this.ENUM = null;
  this.DECIMAL = null;
  this.DATE = null;
  this.TIME = null;
  this.TIMESTAMP = null;
  this.INTEGER = null;
  this.UNKNOWN = null;
  this.JSON = null;
  this.BSON = null;
  if (args) {
    if (args.STRING !== undefined) {
      this.STRING = args.STRING;
    }
    if (args.MAP !== undefined) {
      this.MAP = args.MAP;
    }
    if (args.LIST !== undefined) {
      this.LIST = args.LIST;
    }
    if (args.ENUM !== undefined) {
      this.ENUM = args.ENUM;
    }
    if (args.DECIMAL !== undefined) {
      this.DECIMAL = args.DECIMAL;
    }
    if (args.DATE !== undefined) {
      this.DATE = args.DATE;
    }
    if (args.TIME !== undefined) {
      this.TIME = args.TIME;
    }
    if (args.TIMESTAMP !== undefined) {
      this.TIMESTAMP = args.TIMESTAMP;
    }
    if (args.INTEGER !== undefined) {
      this.INTEGER = args.INTEGER;
    }
    if (args.UNKNOWN !== undefined) {
      this.UNKNOWN = args.UNKNOWN;
    }
    if (args.JSON !== undefined) {
      this.JSON = args.JSON;
    }
    if (args.BSON !== undefined) {
      this.BSON = args.BSON;
    }
  }
};
LogicalType.prototype = {};
LogicalType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.STRING = new ttypes.StringType();
        this.STRING.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.MAP = new ttypes.MapType();
        this.MAP.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.LIST = new ttypes.ListType();
        this.LIST.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ENUM = new ttypes.EnumType();
        this.ENUM.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.DECIMAL = new ttypes.DecimalType();
        this.DECIMAL.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.DATE = new ttypes.DateType();
        this.DATE.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.TIME = new ttypes.TimeType();
        this.TIME.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.TIMESTAMP = new ttypes.TimestampType();
        this.TIMESTAMP.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.INTEGER = new ttypes.IntType();
        this.INTEGER.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.UNKNOWN = new ttypes.NullType();
        this.UNKNOWN.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.JSON = new ttypes.JsonType();
        this.JSON.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.BSON = new ttypes.BsonType();
        this.BSON.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogicalType.prototype.write = function(output) {
  output.writeStructBegin('LogicalType');
  if (this.STRING !== null && this.STRING !== undefined) {
    output.writeFieldBegin('STRING', Thrift.Type.STRUCT, 1);
    this.STRING.write(output);
    output.writeFieldEnd();
  }
  if (this.MAP !== null && this.MAP !== undefined) {
    output.writeFieldBegin('MAP', Thrift.Type.STRUCT, 2);
    this.MAP.write(output);
    output.writeFieldEnd();
  }
  if (this.LIST !== null && this.LIST !== undefined) {
    output.writeFieldBegin('LIST', Thrift.Type.STRUCT, 3);
    this.LIST.write(output);
    output.writeFieldEnd();
  }
  if (this.ENUM !== null && this.ENUM !== undefined) {
    output.writeFieldBegin('ENUM', Thrift.Type.STRUCT, 4);
    this.ENUM.write(output);
    output.writeFieldEnd();
  }
  if (this.DECIMAL !== null && this.DECIMAL !== undefined) {
    output.writeFieldBegin('DECIMAL', Thrift.Type.STRUCT, 5);
    this.DECIMAL.write(output);
    output.writeFieldEnd();
  }
  if (this.DATE !== null && this.DATE !== undefined) {
    output.writeFieldBegin('DATE', Thrift.Type.STRUCT, 6);
    this.DATE.write(output);
    output.writeFieldEnd();
  }
  if (this.TIME !== null && this.TIME !== undefined) {
    output.writeFieldBegin('TIME', Thrift.Type.STRUCT, 7);
    this.TIME.write(output);
    output.writeFieldEnd();
  }
  if (this.TIMESTAMP !== null && this.TIMESTAMP !== undefined) {
    output.writeFieldBegin('TIMESTAMP', Thrift.Type.STRUCT, 8);
    this.TIMESTAMP.write(output);
    output.writeFieldEnd();
  }
  if (this.INTEGER !== null && this.INTEGER !== undefined) {
    output.writeFieldBegin('INTEGER', Thrift.Type.STRUCT, 10);
    this.INTEGER.write(output);
    output.writeFieldEnd();
  }
  if (this.UNKNOWN !== null && this.UNKNOWN !== undefined) {
    output.writeFieldBegin('UNKNOWN', Thrift.Type.STRUCT, 11);
    this.UNKNOWN.write(output);
    output.writeFieldEnd();
  }
  if (this.JSON !== null && this.JSON !== undefined) {
    output.writeFieldBegin('JSON', Thrift.Type.STRUCT, 12);
    this.JSON.write(output);
    output.writeFieldEnd();
  }
  if (this.BSON !== null && this.BSON !== undefined) {
    output.writeFieldBegin('BSON', Thrift.Type.STRUCT, 13);
    this.BSON.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchemaElement = module.exports.SchemaElement = function(args) {
  this.type = null;
  this.type_length = null;
  this.repetition_type = null;
  this.name = null;
  this.num_children = null;
  this.converted_type = null;
  this.scale = null;
  this.precision = null;
  this.field_id = null;
  this.logicalType = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.type_length !== undefined) {
      this.type_length = args.type_length;
    }
    if (args.repetition_type !== undefined) {
      this.repetition_type = args.repetition_type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.num_children !== undefined) {
      this.num_children = args.num_children;
    }
    if (args.converted_type !== undefined) {
      this.converted_type = args.converted_type;
    }
    if (args.scale !== undefined) {
      this.scale = args.scale;
    }
    if (args.precision !== undefined) {
      this.precision = args.precision;
    }
    if (args.field_id !== undefined) {
      this.field_id = args.field_id;
    }
    if (args.logicalType !== undefined) {
      this.logicalType = args.logicalType;
    }
  }
};
SchemaElement.prototype = {};
SchemaElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.repetition_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.num_children = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.converted_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.scale = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.precision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.field_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.logicalType = new ttypes.LogicalType();
        this.logicalType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchemaElement.prototype.write = function(output) {
  output.writeStructBegin('SchemaElement');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.type_length !== null && this.type_length !== undefined) {
    output.writeFieldBegin('type_length', Thrift.Type.I32, 2);
    output.writeI32(this.type_length);
    output.writeFieldEnd();
  }
  if (this.repetition_type !== null && this.repetition_type !== undefined) {
    output.writeFieldBegin('repetition_type', Thrift.Type.I32, 3);
    output.writeI32(this.repetition_type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.num_children !== null && this.num_children !== undefined) {
    output.writeFieldBegin('num_children', Thrift.Type.I32, 5);
    output.writeI32(this.num_children);
    output.writeFieldEnd();
  }
  if (this.converted_type !== null && this.converted_type !== undefined) {
    output.writeFieldBegin('converted_type', Thrift.Type.I32, 6);
    output.writeI32(this.converted_type);
    output.writeFieldEnd();
  }
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.I32, 7);
    output.writeI32(this.scale);
    output.writeFieldEnd();
  }
  if (this.precision !== null && this.precision !== undefined) {
    output.writeFieldBegin('precision', Thrift.Type.I32, 8);
    output.writeI32(this.precision);
    output.writeFieldEnd();
  }
  if (this.field_id !== null && this.field_id !== undefined) {
    output.writeFieldBegin('field_id', Thrift.Type.I32, 9);
    output.writeI32(this.field_id);
    output.writeFieldEnd();
  }
  if (this.logicalType !== null && this.logicalType !== undefined) {
    output.writeFieldBegin('logicalType', Thrift.Type.STRUCT, 10);
    this.logicalType.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataPageHeader = module.exports.DataPageHeader = function(args) {
  this.num_values = null;
  this.encoding = null;
  this.definition_level_encoding = null;
  this.repetition_level_encoding = null;
  this.statistics = null;
  if (args) {
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.definition_level_encoding !== undefined) {
      this.definition_level_encoding = args.definition_level_encoding;
    }
    if (args.repetition_level_encoding !== undefined) {
      this.repetition_level_encoding = args.repetition_level_encoding;
    }
    if (args.statistics !== undefined) {
      this.statistics = args.statistics;
    }
  }
};
DataPageHeader.prototype = {};
DataPageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_values = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.definition_level_encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.repetition_level_encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.statistics = new ttypes.Statistics();
        this.statistics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataPageHeader.prototype.write = function(output) {
  output.writeStructBegin('DataPageHeader');
  if (this.num_values !== null && this.num_values !== undefined) {
    output.writeFieldBegin('num_values', Thrift.Type.I32, 1);
    output.writeI32(this.num_values);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 2);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.definition_level_encoding !== null && this.definition_level_encoding !== undefined) {
    output.writeFieldBegin('definition_level_encoding', Thrift.Type.I32, 3);
    output.writeI32(this.definition_level_encoding);
    output.writeFieldEnd();
  }
  if (this.repetition_level_encoding !== null && this.repetition_level_encoding !== undefined) {
    output.writeFieldBegin('repetition_level_encoding', Thrift.Type.I32, 4);
    output.writeI32(this.repetition_level_encoding);
    output.writeFieldEnd();
  }
  if (this.statistics !== null && this.statistics !== undefined) {
    output.writeFieldBegin('statistics', Thrift.Type.STRUCT, 5);
    this.statistics.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexPageHeader = module.exports.IndexPageHeader = function(args) {
};
IndexPageHeader.prototype = {};
IndexPageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexPageHeader.prototype.write = function(output) {
  output.writeStructBegin('IndexPageHeader');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictionaryPageHeader = module.exports.DictionaryPageHeader = function(args) {
  this.num_values = null;
  this.encoding = null;
  this.is_sorted = null;
  if (args) {
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.is_sorted !== undefined) {
      this.is_sorted = args.is_sorted;
    }
  }
};
DictionaryPageHeader.prototype = {};
DictionaryPageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_values = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_sorted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictionaryPageHeader.prototype.write = function(output) {
  output.writeStructBegin('DictionaryPageHeader');
  if (this.num_values !== null && this.num_values !== undefined) {
    output.writeFieldBegin('num_values', Thrift.Type.I32, 1);
    output.writeI32(this.num_values);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 2);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.is_sorted !== null && this.is_sorted !== undefined) {
    output.writeFieldBegin('is_sorted', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_sorted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataPageHeaderV2 = module.exports.DataPageHeaderV2 = function(args) {
  this.num_values = null;
  this.num_nulls = null;
  this.num_rows = null;
  this.encoding = null;
  this.definition_levels_byte_length = null;
  this.repetition_levels_byte_length = null;
  this.is_compressed = true;
  this.statistics = null;
  if (args) {
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.num_nulls !== undefined) {
      this.num_nulls = args.num_nulls;
    }
    if (args.num_rows !== undefined) {
      this.num_rows = args.num_rows;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.definition_levels_byte_length !== undefined) {
      this.definition_levels_byte_length = args.definition_levels_byte_length;
    }
    if (args.repetition_levels_byte_length !== undefined) {
      this.repetition_levels_byte_length = args.repetition_levels_byte_length;
    }
    if (args.is_compressed !== undefined) {
      this.is_compressed = args.is_compressed;
    }
    if (args.statistics !== undefined) {
      this.statistics = args.statistics;
    }
  }
};
DataPageHeaderV2.prototype = {};
DataPageHeaderV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_values = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num_nulls = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num_rows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.definition_levels_byte_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.repetition_levels_byte_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.is_compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.statistics = new ttypes.Statistics();
        this.statistics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataPageHeaderV2.prototype.write = function(output) {
  output.writeStructBegin('DataPageHeaderV2');
  if (this.num_values !== null && this.num_values !== undefined) {
    output.writeFieldBegin('num_values', Thrift.Type.I32, 1);
    output.writeI32(this.num_values);
    output.writeFieldEnd();
  }
  if (this.num_nulls !== null && this.num_nulls !== undefined) {
    output.writeFieldBegin('num_nulls', Thrift.Type.I32, 2);
    output.writeI32(this.num_nulls);
    output.writeFieldEnd();
  }
  if (this.num_rows !== null && this.num_rows !== undefined) {
    output.writeFieldBegin('num_rows', Thrift.Type.I32, 3);
    output.writeI32(this.num_rows);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.definition_levels_byte_length !== null && this.definition_levels_byte_length !== undefined) {
    output.writeFieldBegin('definition_levels_byte_length', Thrift.Type.I32, 5);
    output.writeI32(this.definition_levels_byte_length);
    output.writeFieldEnd();
  }
  if (this.repetition_levels_byte_length !== null && this.repetition_levels_byte_length !== undefined) {
    output.writeFieldBegin('repetition_levels_byte_length', Thrift.Type.I32, 6);
    output.writeI32(this.repetition_levels_byte_length);
    output.writeFieldEnd();
  }
  if (this.is_compressed !== null && this.is_compressed !== undefined) {
    output.writeFieldBegin('is_compressed', Thrift.Type.BOOL, 7);
    output.writeBool(this.is_compressed);
    output.writeFieldEnd();
  }
  if (this.statistics !== null && this.statistics !== undefined) {
    output.writeFieldBegin('statistics', Thrift.Type.STRUCT, 8);
    this.statistics.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PageHeader = module.exports.PageHeader = function(args) {
  this.type = null;
  this.uncompressed_page_size = null;
  this.compressed_page_size = null;
  this.crc = null;
  this.data_page_header = null;
  this.index_page_header = null;
  this.dictionary_page_header = null;
  this.data_page_header_v2 = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.uncompressed_page_size !== undefined) {
      this.uncompressed_page_size = args.uncompressed_page_size;
    }
    if (args.compressed_page_size !== undefined) {
      this.compressed_page_size = args.compressed_page_size;
    }
    if (args.crc !== undefined) {
      this.crc = args.crc;
    }
    if (args.data_page_header !== undefined) {
      this.data_page_header = args.data_page_header;
    }
    if (args.index_page_header !== undefined) {
      this.index_page_header = args.index_page_header;
    }
    if (args.dictionary_page_header !== undefined) {
      this.dictionary_page_header = args.dictionary_page_header;
    }
    if (args.data_page_header_v2 !== undefined) {
      this.data_page_header_v2 = args.data_page_header_v2;
    }
  }
};
PageHeader.prototype = {};
PageHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.uncompressed_page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.compressed_page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.crc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_page_header = new ttypes.DataPageHeader();
        this.data_page_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.index_page_header = new ttypes.IndexPageHeader();
        this.index_page_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.dictionary_page_header = new ttypes.DictionaryPageHeader();
        this.dictionary_page_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_page_header_v2 = new ttypes.DataPageHeaderV2();
        this.data_page_header_v2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageHeader.prototype.write = function(output) {
  output.writeStructBegin('PageHeader');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.uncompressed_page_size !== null && this.uncompressed_page_size !== undefined) {
    output.writeFieldBegin('uncompressed_page_size', Thrift.Type.I32, 2);
    output.writeI32(this.uncompressed_page_size);
    output.writeFieldEnd();
  }
  if (this.compressed_page_size !== null && this.compressed_page_size !== undefined) {
    output.writeFieldBegin('compressed_page_size', Thrift.Type.I32, 3);
    output.writeI32(this.compressed_page_size);
    output.writeFieldEnd();
  }
  if (this.crc !== null && this.crc !== undefined) {
    output.writeFieldBegin('crc', Thrift.Type.I32, 4);
    output.writeI32(this.crc);
    output.writeFieldEnd();
  }
  if (this.data_page_header !== null && this.data_page_header !== undefined) {
    output.writeFieldBegin('data_page_header', Thrift.Type.STRUCT, 5);
    this.data_page_header.write(output);
    output.writeFieldEnd();
  }
  if (this.index_page_header !== null && this.index_page_header !== undefined) {
    output.writeFieldBegin('index_page_header', Thrift.Type.STRUCT, 6);
    this.index_page_header.write(output);
    output.writeFieldEnd();
  }
  if (this.dictionary_page_header !== null && this.dictionary_page_header !== undefined) {
    output.writeFieldBegin('dictionary_page_header', Thrift.Type.STRUCT, 7);
    this.dictionary_page_header.write(output);
    output.writeFieldEnd();
  }
  if (this.data_page_header_v2 !== null && this.data_page_header_v2 !== undefined) {
    output.writeFieldBegin('data_page_header_v2', Thrift.Type.STRUCT, 8);
    this.data_page_header_v2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyValue = module.exports.KeyValue = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
KeyValue.prototype = {};
KeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValue.prototype.write = function(output) {
  output.writeStructBegin('KeyValue');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SortingColumn = module.exports.SortingColumn = function(args) {
  this.column_idx = null;
  this.descending = null;
  this.nulls_first = null;
  if (args) {
    if (args.column_idx !== undefined) {
      this.column_idx = args.column_idx;
    }
    if (args.descending !== undefined) {
      this.descending = args.descending;
    }
    if (args.nulls_first !== undefined) {
      this.nulls_first = args.nulls_first;
    }
  }
};
SortingColumn.prototype = {};
SortingColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.column_idx = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.descending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.nulls_first = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SortingColumn.prototype.write = function(output) {
  output.writeStructBegin('SortingColumn');
  if (this.column_idx !== null && this.column_idx !== undefined) {
    output.writeFieldBegin('column_idx', Thrift.Type.I32, 1);
    output.writeI32(this.column_idx);
    output.writeFieldEnd();
  }
  if (this.descending !== null && this.descending !== undefined) {
    output.writeFieldBegin('descending', Thrift.Type.BOOL, 2);
    output.writeBool(this.descending);
    output.writeFieldEnd();
  }
  if (this.nulls_first !== null && this.nulls_first !== undefined) {
    output.writeFieldBegin('nulls_first', Thrift.Type.BOOL, 3);
    output.writeBool(this.nulls_first);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PageEncodingStats = module.exports.PageEncodingStats = function(args) {
  this.page_type = null;
  this.encoding = null;
  this.count = null;
  if (args) {
    if (args.page_type !== undefined) {
      this.page_type = args.page_type;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
PageEncodingStats.prototype = {};
PageEncodingStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.page_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageEncodingStats.prototype.write = function(output) {
  output.writeStructBegin('PageEncodingStats');
  if (this.page_type !== null && this.page_type !== undefined) {
    output.writeFieldBegin('page_type', Thrift.Type.I32, 1);
    output.writeI32(this.page_type);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 2);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnMetaData = module.exports.ColumnMetaData = function(args) {
  this.type = null;
  this.encodings = null;
  this.path_in_schema = null;
  this.codec = null;
  this.num_values = null;
  this.total_uncompressed_size = null;
  this.total_compressed_size = null;
  this.key_value_metadata = null;
  this.data_page_offset = null;
  this.index_page_offset = null;
  this.dictionary_page_offset = null;
  this.statistics = null;
  this.encoding_stats = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.encodings !== undefined) {
      this.encodings = args.encodings;
    }
    if (args.path_in_schema !== undefined) {
      this.path_in_schema = args.path_in_schema;
    }
    if (args.codec !== undefined) {
      this.codec = args.codec;
    }
    if (args.num_values !== undefined) {
      this.num_values = args.num_values;
    }
    if (args.total_uncompressed_size !== undefined) {
      this.total_uncompressed_size = args.total_uncompressed_size;
    }
    if (args.total_compressed_size !== undefined) {
      this.total_compressed_size = args.total_compressed_size;
    }
    if (args.key_value_metadata !== undefined) {
      this.key_value_metadata = args.key_value_metadata;
    }
    if (args.data_page_offset !== undefined) {
      this.data_page_offset = args.data_page_offset;
    }
    if (args.index_page_offset !== undefined) {
      this.index_page_offset = args.index_page_offset;
    }
    if (args.dictionary_page_offset !== undefined) {
      this.dictionary_page_offset = args.dictionary_page_offset;
    }
    if (args.statistics !== undefined) {
      this.statistics = args.statistics;
    }
    if (args.encoding_stats !== undefined) {
      this.encoding_stats = args.encoding_stats;
    }
  }
};
ColumnMetaData.prototype = {};
ColumnMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.encodings = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.encodings.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.path_in_schema = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.path_in_schema.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.codec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.num_values = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.total_uncompressed_size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.total_compressed_size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.key_value_metadata = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new ttypes.KeyValue();
          elem20.read(input);
          this.key_value_metadata.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.data_page_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.index_page_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dictionary_page_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.statistics = new ttypes.Statistics();
        this.statistics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.encoding_stats = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new ttypes.PageEncodingStats();
          elem27.read(input);
          this.encoding_stats.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnMetaData.prototype.write = function(output) {
  output.writeStructBegin('ColumnMetaData');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.encodings !== null && this.encodings !== undefined) {
    output.writeFieldBegin('encodings', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.encodings.length);
    for (var iter28 in this.encodings)
    {
      if (this.encodings.hasOwnProperty(iter28))
      {
        iter28 = this.encodings[iter28];
        output.writeI32(iter28);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.path_in_schema !== null && this.path_in_schema !== undefined) {
    output.writeFieldBegin('path_in_schema', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.path_in_schema.length);
    for (var iter29 in this.path_in_schema)
    {
      if (this.path_in_schema.hasOwnProperty(iter29))
      {
        iter29 = this.path_in_schema[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.codec !== null && this.codec !== undefined) {
    output.writeFieldBegin('codec', Thrift.Type.I32, 4);
    output.writeI32(this.codec);
    output.writeFieldEnd();
  }
  if (this.num_values !== null && this.num_values !== undefined) {
    output.writeFieldBegin('num_values', Thrift.Type.I64, 5);
    output.writeI64(this.num_values);
    output.writeFieldEnd();
  }
  if (this.total_uncompressed_size !== null && this.total_uncompressed_size !== undefined) {
    output.writeFieldBegin('total_uncompressed_size', Thrift.Type.I64, 6);
    output.writeI64(this.total_uncompressed_size);
    output.writeFieldEnd();
  }
  if (this.total_compressed_size !== null && this.total_compressed_size !== undefined) {
    output.writeFieldBegin('total_compressed_size', Thrift.Type.I64, 7);
    output.writeI64(this.total_compressed_size);
    output.writeFieldEnd();
  }
  if (this.key_value_metadata !== null && this.key_value_metadata !== undefined) {
    output.writeFieldBegin('key_value_metadata', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.key_value_metadata.length);
    for (var iter30 in this.key_value_metadata)
    {
      if (this.key_value_metadata.hasOwnProperty(iter30))
      {
        iter30 = this.key_value_metadata[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.data_page_offset !== null && this.data_page_offset !== undefined) {
    output.writeFieldBegin('data_page_offset', Thrift.Type.I64, 9);
    output.writeI64(this.data_page_offset);
    output.writeFieldEnd();
  }
  if (this.index_page_offset !== null && this.index_page_offset !== undefined) {
    output.writeFieldBegin('index_page_offset', Thrift.Type.I64, 10);
    output.writeI64(this.index_page_offset);
    output.writeFieldEnd();
  }
  if (this.dictionary_page_offset !== null && this.dictionary_page_offset !== undefined) {
    output.writeFieldBegin('dictionary_page_offset', Thrift.Type.I64, 11);
    output.writeI64(this.dictionary_page_offset);
    output.writeFieldEnd();
  }
  if (this.statistics !== null && this.statistics !== undefined) {
    output.writeFieldBegin('statistics', Thrift.Type.STRUCT, 12);
    this.statistics.write(output);
    output.writeFieldEnd();
  }
  if (this.encoding_stats !== null && this.encoding_stats !== undefined) {
    output.writeFieldBegin('encoding_stats', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.encoding_stats.length);
    for (var iter31 in this.encoding_stats)
    {
      if (this.encoding_stats.hasOwnProperty(iter31))
      {
        iter31 = this.encoding_stats[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnChunk = module.exports.ColumnChunk = function(args) {
  this.file_path = null;
  this.file_offset = null;
  this.meta_data = null;
  this.offset_index_offset = null;
  this.offset_index_length = null;
  this.column_index_offset = null;
  this.column_index_length = null;
  if (args) {
    if (args.file_path !== undefined) {
      this.file_path = args.file_path;
    }
    if (args.file_offset !== undefined) {
      this.file_offset = args.file_offset;
    }
    if (args.meta_data !== undefined) {
      this.meta_data = args.meta_data;
    }
    if (args.offset_index_offset !== undefined) {
      this.offset_index_offset = args.offset_index_offset;
    }
    if (args.offset_index_length !== undefined) {
      this.offset_index_length = args.offset_index_length;
    }
    if (args.column_index_offset !== undefined) {
      this.column_index_offset = args.column_index_offset;
    }
    if (args.column_index_length !== undefined) {
      this.column_index_length = args.column_index_length;
    }
  }
};
ColumnChunk.prototype = {};
ColumnChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.file_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meta_data = new ttypes.ColumnMetaData();
        this.meta_data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.offset_index_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.offset_index_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.column_index_offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.column_index_length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnChunk.prototype.write = function(output) {
  output.writeStructBegin('ColumnChunk');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  if (this.file_offset !== null && this.file_offset !== undefined) {
    output.writeFieldBegin('file_offset', Thrift.Type.I64, 2);
    output.writeI64(this.file_offset);
    output.writeFieldEnd();
  }
  if (this.meta_data !== null && this.meta_data !== undefined) {
    output.writeFieldBegin('meta_data', Thrift.Type.STRUCT, 3);
    this.meta_data.write(output);
    output.writeFieldEnd();
  }
  if (this.offset_index_offset !== null && this.offset_index_offset !== undefined) {
    output.writeFieldBegin('offset_index_offset', Thrift.Type.I64, 4);
    output.writeI64(this.offset_index_offset);
    output.writeFieldEnd();
  }
  if (this.offset_index_length !== null && this.offset_index_length !== undefined) {
    output.writeFieldBegin('offset_index_length', Thrift.Type.I32, 5);
    output.writeI32(this.offset_index_length);
    output.writeFieldEnd();
  }
  if (this.column_index_offset !== null && this.column_index_offset !== undefined) {
    output.writeFieldBegin('column_index_offset', Thrift.Type.I64, 6);
    output.writeI64(this.column_index_offset);
    output.writeFieldEnd();
  }
  if (this.column_index_length !== null && this.column_index_length !== undefined) {
    output.writeFieldBegin('column_index_length', Thrift.Type.I32, 7);
    output.writeI32(this.column_index_length);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RowGroup = module.exports.RowGroup = function(args) {
  this.columns = null;
  this.total_byte_size = null;
  this.num_rows = null;
  this.sorting_columns = null;
  if (args) {
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.total_byte_size !== undefined) {
      this.total_byte_size = args.total_byte_size;
    }
    if (args.num_rows !== undefined) {
      this.num_rows = args.num_rows;
    }
    if (args.sorting_columns !== undefined) {
      this.sorting_columns = args.sorting_columns;
    }
  }
};
RowGroup.prototype = {};
RowGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.columns = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ColumnChunk();
          elem38.read(input);
          this.columns.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.total_byte_size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.num_rows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.sorting_columns = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.SortingColumn();
          elem45.read(input);
          this.sorting_columns.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RowGroup.prototype.write = function(output) {
  output.writeStructBegin('RowGroup');
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter46 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter46))
      {
        iter46 = this.columns[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total_byte_size !== null && this.total_byte_size !== undefined) {
    output.writeFieldBegin('total_byte_size', Thrift.Type.I64, 2);
    output.writeI64(this.total_byte_size);
    output.writeFieldEnd();
  }
  if (this.num_rows !== null && this.num_rows !== undefined) {
    output.writeFieldBegin('num_rows', Thrift.Type.I64, 3);
    output.writeI64(this.num_rows);
    output.writeFieldEnd();
  }
  if (this.sorting_columns !== null && this.sorting_columns !== undefined) {
    output.writeFieldBegin('sorting_columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.sorting_columns.length);
    for (var iter47 in this.sorting_columns)
    {
      if (this.sorting_columns.hasOwnProperty(iter47))
      {
        iter47 = this.sorting_columns[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TypeDefinedOrder = module.exports.TypeDefinedOrder = function(args) {
};
TypeDefinedOrder.prototype = {};
TypeDefinedOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TypeDefinedOrder.prototype.write = function(output) {
  output.writeStructBegin('TypeDefinedOrder');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnOrder = module.exports.ColumnOrder = function(args) {
  this.TYPE_ORDER = null;
  if (args) {
    if (args.TYPE_ORDER !== undefined) {
      this.TYPE_ORDER = args.TYPE_ORDER;
    }
  }
};
ColumnOrder.prototype = {};
ColumnOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.TYPE_ORDER = new ttypes.TypeDefinedOrder();
        this.TYPE_ORDER.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnOrder.prototype.write = function(output) {
  output.writeStructBegin('ColumnOrder');
  if (this.TYPE_ORDER !== null && this.TYPE_ORDER !== undefined) {
    output.writeFieldBegin('TYPE_ORDER', Thrift.Type.STRUCT, 1);
    this.TYPE_ORDER.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PageLocation = module.exports.PageLocation = function(args) {
  this.offset = null;
  this.compressed_page_size = null;
  this.first_row_index = null;
  if (args) {
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.compressed_page_size !== undefined) {
      this.compressed_page_size = args.compressed_page_size;
    }
    if (args.first_row_index !== undefined) {
      this.first_row_index = args.first_row_index;
    }
  }
};
PageLocation.prototype = {};
PageLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compressed_page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.first_row_index = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageLocation.prototype.write = function(output) {
  output.writeStructBegin('PageLocation');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.compressed_page_size !== null && this.compressed_page_size !== undefined) {
    output.writeFieldBegin('compressed_page_size', Thrift.Type.I32, 2);
    output.writeI32(this.compressed_page_size);
    output.writeFieldEnd();
  }
  if (this.first_row_index !== null && this.first_row_index !== undefined) {
    output.writeFieldBegin('first_row_index', Thrift.Type.I64, 3);
    output.writeI64(this.first_row_index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OffsetIndex = module.exports.OffsetIndex = function(args) {
  this.page_locations = null;
  if (args) {
    if (args.page_locations !== undefined) {
      this.page_locations = args.page_locations;
    }
  }
};
OffsetIndex.prototype = {};
OffsetIndex.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.page_locations = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.PageLocation();
          elem54.read(input);
          this.page_locations.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OffsetIndex.prototype.write = function(output) {
  output.writeStructBegin('OffsetIndex');
  if (this.page_locations !== null && this.page_locations !== undefined) {
    output.writeFieldBegin('page_locations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.page_locations.length);
    for (var iter55 in this.page_locations)
    {
      if (this.page_locations.hasOwnProperty(iter55))
      {
        iter55 = this.page_locations[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnIndex = module.exports.ColumnIndex = function(args) {
  this.null_pages = null;
  this.min_values = null;
  this.max_values = null;
  this.boundary_order = null;
  this.null_counts = null;
  if (args) {
    if (args.null_pages !== undefined) {
      this.null_pages = args.null_pages;
    }
    if (args.min_values !== undefined) {
      this.min_values = args.min_values;
    }
    if (args.max_values !== undefined) {
      this.max_values = args.max_values;
    }
    if (args.boundary_order !== undefined) {
      this.boundary_order = args.boundary_order;
    }
    if (args.null_counts !== undefined) {
      this.null_counts = args.null_counts;
    }
  }
};
ColumnIndex.prototype = {};
ColumnIndex.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.null_pages = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readBool();
          this.null_pages.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.min_values = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = input.readString();
          this.min_values.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.max_values = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readString();
          this.max_values.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.boundary_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size77 = 0;
        var _rtmp381;
        this.null_counts = [];
        var _etype80 = 0;
        _rtmp381 = input.readListBegin();
        _etype80 = _rtmp381.etype;
        _size77 = _rtmp381.size;
        for (var _i82 = 0; _i82 < _size77; ++_i82)
        {
          var elem83 = null;
          elem83 = input.readI64();
          this.null_counts.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnIndex.prototype.write = function(output) {
  output.writeStructBegin('ColumnIndex');
  if (this.null_pages !== null && this.null_pages !== undefined) {
    output.writeFieldBegin('null_pages', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BOOL, this.null_pages.length);
    for (var iter84 in this.null_pages)
    {
      if (this.null_pages.hasOwnProperty(iter84))
      {
        iter84 = this.null_pages[iter84];
        output.writeBool(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.min_values !== null && this.min_values !== undefined) {
    output.writeFieldBegin('min_values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.min_values.length);
    for (var iter85 in this.min_values)
    {
      if (this.min_values.hasOwnProperty(iter85))
      {
        iter85 = this.min_values[iter85];
        output.writeString(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_values !== null && this.max_values !== undefined) {
    output.writeFieldBegin('max_values', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.max_values.length);
    for (var iter86 in this.max_values)
    {
      if (this.max_values.hasOwnProperty(iter86))
      {
        iter86 = this.max_values[iter86];
        output.writeString(iter86);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.boundary_order !== null && this.boundary_order !== undefined) {
    output.writeFieldBegin('boundary_order', Thrift.Type.I32, 4);
    output.writeI32(this.boundary_order);
    output.writeFieldEnd();
  }
  if (this.null_counts !== null && this.null_counts !== undefined) {
    output.writeFieldBegin('null_counts', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.null_counts.length);
    for (var iter87 in this.null_counts)
    {
      if (this.null_counts.hasOwnProperty(iter87))
      {
        iter87 = this.null_counts[iter87];
        output.writeI64(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileMetaData = module.exports.FileMetaData = function(args) {
  this.version = null;
  this.schema = null;
  this.num_rows = null;
  this.row_groups = null;
  this.key_value_metadata = null;
  this.created_by = null;
  this.column_orders = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
    if (args.num_rows !== undefined) {
      this.num_rows = args.num_rows;
    }
    if (args.row_groups !== undefined) {
      this.row_groups = args.row_groups;
    }
    if (args.key_value_metadata !== undefined) {
      this.key_value_metadata = args.key_value_metadata;
    }
    if (args.created_by !== undefined) {
      this.created_by = args.created_by;
    }
    if (args.column_orders !== undefined) {
      this.column_orders = args.column_orders;
    }
  }
};
FileMetaData.prototype = {};
FileMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.schema = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.SchemaElement();
          elem94.read(input);
          this.schema.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.num_rows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.row_groups = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = new ttypes.RowGroup();
          elem101.read(input);
          this.row_groups.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.key_value_metadata = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = new ttypes.KeyValue();
          elem108.read(input);
          this.key_value_metadata.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.created_by = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size109 = 0;
        var _rtmp3113;
        this.column_orders = [];
        var _etype112 = 0;
        _rtmp3113 = input.readListBegin();
        _etype112 = _rtmp3113.etype;
        _size109 = _rtmp3113.size;
        for (var _i114 = 0; _i114 < _size109; ++_i114)
        {
          var elem115 = null;
          elem115 = new ttypes.ColumnOrder();
          elem115.read(input);
          this.column_orders.push(elem115);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileMetaData.prototype.write = function(output) {
  output.writeStructBegin('FileMetaData');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.schema.length);
    for (var iter116 in this.schema)
    {
      if (this.schema.hasOwnProperty(iter116))
      {
        iter116 = this.schema[iter116];
        iter116.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.num_rows !== null && this.num_rows !== undefined) {
    output.writeFieldBegin('num_rows', Thrift.Type.I64, 3);
    output.writeI64(this.num_rows);
    output.writeFieldEnd();
  }
  if (this.row_groups !== null && this.row_groups !== undefined) {
    output.writeFieldBegin('row_groups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_groups.length);
    for (var iter117 in this.row_groups)
    {
      if (this.row_groups.hasOwnProperty(iter117))
      {
        iter117 = this.row_groups[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.key_value_metadata !== null && this.key_value_metadata !== undefined) {
    output.writeFieldBegin('key_value_metadata', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.key_value_metadata.length);
    for (var iter118 in this.key_value_metadata)
    {
      if (this.key_value_metadata.hasOwnProperty(iter118))
      {
        iter118 = this.key_value_metadata[iter118];
        iter118.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.created_by !== null && this.created_by !== undefined) {
    output.writeFieldBegin('created_by', Thrift.Type.STRING, 6);
    output.writeString(this.created_by);
    output.writeFieldEnd();
  }
  if (this.column_orders !== null && this.column_orders !== undefined) {
    output.writeFieldBegin('column_orders', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.column_orders.length);
    for (var iter119 in this.column_orders)
    {
      if (this.column_orders.hasOwnProperty(iter119))
      {
        iter119 = this.column_orders[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

